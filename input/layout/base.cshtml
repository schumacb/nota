<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>@Constants.ProjectName</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <script type="text/x-mathjax-config">
        MathJax.Ajax.config.path["Contrib"] = "/scripts/MathJax-extensions";
    </script>

    <script src="/Scripts/MathJax/MathJax.js?config=TeX-MML-AM_HTMLorMML"></script>

    <!-- CSS -->
    <link href="/Content/bootstrap.css" rel="stylesheet">
    <!--<link href="../assets/css/bootstrap.css" rel="stylesheet">-->
    <!--<link href="../assets/css/bootstrap-responsive.css" rel="stylesheet">-->
    <link href="/css/custom.css" rel="stylesheet">

    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="../assets/js/html5shiv.js"></script>
    <![endif]-->

    <!-- Fav and touch icons -->
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/assets/ico/apple-touch-icon-144-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/assets/ico/apple-touch-icon-114-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/assets/ico/apple-touch-icon-72-precomposed.png">
    <link rel="apple-touch-icon-precomposed" href="/assets/ico/apple-touch-icon-57-precomposed.png">
    <link rel="shortcut icon" href="/assets/ico/favicon.png">
</head>

<body>

    @{ var currentFile = Metadata["RelativeFilePath"] as FilePath; }


    <!-- Part 1: Wrap all page content here -->

    <!-- Fixed navbar -->
    <nav class="navbar navbar-default navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button class="navbar-toggle collapsed" aria-expanded="false" aria-controls="navbar" type="button" data-toggle="collapse" data-target="#navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span> 
          </button>
                <a class="navbar-brand" href="#">@Constants.ProjectName</a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
                <ul class="nav navbar-nav">
                    <!--@if(@"\".Equals(Metadata["RelativeFilePath"]))
                  {
                    <li class="active"><a href="/">Home</a></li>
                  }
                  else{
                    <li><a href="/">Home</a></li>
                  } -->

                    @if(Documents["books"].Any(doc => doc["RelativeFilePath"].Equals(Metadata["RelativeFilePath"]))) { @:
                    <li class="dropdown active">
                        } else { @:
                        <li class="dropdown">
                            }
                            <a class="dropdown-toggle" role="button" aria-expanded="false" aria-haspopup="true" href="#" data-toggle="dropdown">Bücher <span class="caret"></span></a>
                            <ul class="dropdown-menu">
                                @{ string parentPath = @"\books"; bool isFirstEntry = true; IList
                                <string> bookTypeOrder = new[]{ "Regelbuch", "Weltbeschreibung", }; } @foreach(var group in Documents["books"] .Where(x=>x.Metadata.ContainsKey("BookType")) .GroupBy(x=>x["BookType"]) .OrderBy(x=>bookTypeOrder.IndexOf((string)x.Key)))
                                    {
                                    <li class="dropdown-header">@group.Key</li>

                                    @foreach(var doc in group.OrderBy(x=> x["BookNumber"])) { @if(!@doc.Metadata.ContainsKey("Title")) {
                                    <li><a href="/@doc[" RelativeFilePath "]">@doc.Source</a></li>
                                    continue; } @if(@doc["RelativeFilePath"].Equals(Metadata["RelativeFilePath"])) {
                                    <li class="active"><a href="/@doc[" RelativeFilePath "]">@doc["Title"]</a></li>
                                    } else{
                                    <li><a href="/@doc[" RelativeFilePath "]">@doc["Title"]</a></li>
                                    } isFirstEntry = false; //parentPath = System.IO.Path.GetDirectoryName(currentTree.Value); } }
                                    <!--<li><a href="#">Action</a></li>
                <li><a href="#">Another action</a></li>
                <li><a href="#">Something else here</a></li>
                <li class="divider" role="separator"></li>
                <li class="dropdown-header">Nav header</li>
                <li><a href="#">Separated link</a></li>
                <li><a href="#">One more separated link</a></li>-->
                            </ul>
                        </li>


                        @foreach(var doc in Documents["MainMenue"]) { @if(@doc.Source.Equals(Model.Source)) { @if(@doc.Metadata.ContainsKey("Title")) {
                        <li class="active"><a href="/@doc[" RelativeFilePath "]">@doc["Title"]</a></li>
                        } else {
                        <li class="active"><a href="/@doc[" RelativeFilePath "]">Missing Title</a></li>

                        } } else{ @if(@doc.Metadata.ContainsKey("Title")) {
                        <li><a href="/@doc[" RelativeFilePath "]">@doc["Title"]</a></li>
                        } else {
                        <li><a href="/@doc[" RelativeFilePath "]">Missing Title</a></li>

                        } } }
                </ul>
            </div>
            <!--/.nav-collapse -->
        </div>
    </nav>
    <div id="wrap">

        @if(Metadata.ContainsKey("Disabled") && !((string)Metadata["Disabled"]).Equals("false",StringComparison.CurrentCultureIgnoreCase)) {

        <div class="block">
            <div id="wrap">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-4 col-lg-offset-4">
                            <div class="bs-component">
                                <div class="panel panel-warning">
                                    <div class="panel-heading">
                                        <h3 class="panel-title"><span class="glyphicon glyphicon-warning-sign"></span> Noch nicht fertig gestellt</h3>
                                    </div>
                                    <div class="panel-body">
                                        Diese Seite wird zurzeit noch bearbeitet.
                                    </div>
                                </div>
                                <div class="btn btn-primary btn-xs" id="source-button" style="display: none;">&lt; &gt;</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }
        <!-- Begin page content -->
        <div class="container">
            @if(Metadata.ContainsKey("Title")){

            <div class="page-header">
                <h1>@Metadata["Title"]</h1>
            </div>
            }
            <noscript>
          <div class="alert alert-danger" role="alert">
          Diese Seite benötigt leider JavaScript um zu Funktionieren. Ohne JavaScript kann es zu Problemen kommen.
          </div>
        </noscript> @RenderBody() @if(Metadata.ContainsKey("Next")&&Metadata.ContainsKey("Previous")){ var prevous = Metadata["Previous"] as IDocument; var next = Metadata["Next"] as IDocument; while(prevous != null && !prevous.Metadata.ContainsKey("RelativeFilePath")
            && !prevous.Metadata.Bool("hide",false)){ prevous = prevous.Get
            <IDocument>("Previous"); } while(next != null && (!next.Metadata.ContainsKey("RelativeFilePath")|| next.Metadata.Bool("hide",false))){ next = next.Get
                <IDocument>("Next"); }

                    <nav>
                        <ul class="pager">
                            @if(prevous !=null){
                            <li class="previous"><a href="/@prevous[" RelativeFilePath "]"><span aria-hidden="true">&larr;</span> Zurück</a></li>
                            } else {
                            <li class="previous disabled"><a href="#"><span aria-hidden="true">&larr;</span> Zurück</a></li>
                            }

                            <li><a href="#"><span aria-hidden="true">&uarr;</span> Top</a></li>

                            @if(next !=null){
                            <li class="next"><a href="/@next[" RelativeFilePath "]">Weiter <span aria-hidden="true">&rarr;</span></a></li>
                            } else {
                            <li class="next disabled"><a href="#">Weiter <span aria-hidden="true">&rarr;</span></a></li>
                            }

                        </ul>
                    </nav>


                    }
        </div>


        <div id="push"></div>
    </div>

    <div id="footer">
        <div class="container">

            <div class="btn-group pull-left">

                @if(Metadata.ContainsKey("Contributors")){
                <a id="mitwirkende" title="Mitwirkende" class="btn btn-default btn-xs" href="#" data-toggle="popover" data-placement="top" data-container="body" data-template='<div class="popover" style="max-width:unset" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'>Mitwirkende</a>
                <div id="mitwirkendeContent" style="display: none">
                    <ul class="list-unstyled">
                        @foreach(var con in (Metadata["Contributors"] as IEnumerable
                        <IDocument>).OrderBy(x=>x["ContributorName"])){ var url ="/author/" +con["ContributorEmail"] +".html";
                            <li class="list-item"><a href="@url"> @con["ContributorName"]</a></li>
                            }
                    </ul>
                    <ul class="list-unstyled">
                        @{ var commits = (Metadata["Contributors"] as IEnumerable
                        <IDocument>).SelectMany(x=> (IEnumerable
                            <IDocument>) x["Commits"]).OrderByDescending(x=>x["CommitterWhen"]).ToArray(); var numberOfCommitsToDisplay = 3; } @foreach(var con in commits.Take(numberOfCommitsToDisplay)){ var time = ((DateTimeOffset)con["CommitterWhen"]).ToLocalTime().ToString("dd.MM.yy
                                HH:mm"); var message = con["Message"] as string; var messageLength =80; @if(message.Length > messageLength || message.Contains("\n")){ messageLength = Math.Min(messageLength, message.IndexOf("\n")+3); var shortMessage =
                                message.Substring(0,messageLength-3)+"...";

                                <li class="list-item"><small>@time</small> <abbr title='@message'>@shortMessage</abbr></li>
                                }else{
                                <li class="list-item"><small>@time</small> @message</li>
                                } } @if(Metadata.ContainsKey("ReposetoryHistoryUrl")){ @if(commits.Length > numberOfCommitsToDisplay){
                                <li class="list-item"><a href='@Metadata["ReposetoryHistoryUrl"]' target="_blank">Mehr...</a></li>
                                } else{
                                <li class="list-item"><a href='@Metadata["ReposetoryHistoryUrl"]' target="_blank">Details</a></li>
                                } }
                    </ul>
                </div>
                } @if(Metadata.ContainsKey("ReposetoryUrl")){
                <a class="btn btn-default btn-xs" target="_blank" href='@Metadata["ReposetoryUrl"]'><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span> Bearbeiten</a> }
            </div>
            <div class="pull-left" style="margin-left:5px">
                <small class="text-muted hidden-xs" id="lastEdit"></small>
            </div>

            <div id="licenseContent" style="display: none">
                <small>
            <span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">nota</span> von <a xmlns:cc="http://creativecommons.org/ns#" href="http://nota-game.azurewebsites.net" property="cc:attributionName" rel="cc:attributionURL">Patrick Kranz</a> ist lizenziert unter einer <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Namensnennung - Nicht-kommerziell - Weitergabe unter gleichen Bedingungen 4.0 International Lizenz</a>.
          </small>
            </div>
            <a class="pull-right" id="license" rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/" data-toggle="popover" data-placement="top" data-container="body">
          <img alt="Creative Commons Lizenzvertrag" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />
        </a>
        </div>
    </div>



    <!-- 
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="/Scripts/jquery-2.2.3.min.js"></script>
    <script src="/Scripts/bootstrap.min.js"></script>


    <script>
        $(document).ready(function() {

            $(function() {
                $('[data-toggle="popover"]').popover()
            })

            $('#mitwirkende').popover({
                html: true,
                content: function() {
                    return $('#mitwirkendeContent').html();
                }
            }).click(function(e) {
                e.preventDefault();
            });

            $('#license').popover({
                html: true,
                content: function() {
                    return $('#licenseContent').html();
                }
            }).click(function(e) {
                e.preventDefault();
            });

            @ {
                var generated = true; // false falls es sich um eine bearbeitbare datei in git handelt.
                var lastEditDateTimeOffset = DateTimeOffset.Now;
                @if(Metadata.ContainsKey("Contributors")) {
                    var commitTimeOfset = (DateTimeOffset ? )(Metadata["Contributors"] as IEnumerable < IDocument > ).Select(x => ((IEnumerable < IDocument > ) x["Commits"]).Select(y => (DateTimeOffset ? ) y["CommitterWhen"]).OrderByDescending(y => y).FirstOrDefault()).OrderByDescending(x => x).FirstOrDefault();
                    @if(commitTimeOfset == null) {
                        lastEditDateTimeOffset = DateTimeOffset.Now;
                    }
                    else {
                        lastEditDateTimeOffset = commitTimeOfset.Value;
                        generated = false;
                    }

                }
                var lastEdit = TimeZoneInfo.ConvertTimeFromUtc(lastEditDateTimeOffset.UtcDateTime,  Constants.TimeZone);
            }
            var calculateTime = function() {
                var currentDate = new Date();
                var pastDate = new Date(@lastEdit.Year, @lastEdit.Month - 1, @lastEdit.Day, @lastEdit.Hour, @lastEdit.Minute, @lastEdit.Second);

                var currentDateInDays = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
                var pastDateInDays = new Date(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate());

                var diference = currentDate.getTime() - pastDate.getTime();
                var diferenceDays = (currentDateInDays - pastDateInDays) / 1000 / 60 / 60 / 24;




                diference /= 1000; //seconds
                var showString;
                if (diference < 60)
                    showString = "vor " + Math.floor(diference) + " Sekunden";
                else if (diference / 60 < 60) {
                    if (diference / 60 < 2)
                        showString = "vor eier Minute";
                    else
                        showString = "vor " + Math.floor(diference / 60) + " Minuten";
                } else if (diference / 60 / 60 < 24) {
                    if (diference / 60 / 60 < 2)
                        showString = "vor einer Stunde";
                    else
                        showString = "vor " + Math.floor(diference / 60 / 60) + " Stunden";
                } else if (diferenceDays < 7) {
                    var days = currentDate.getDate() - pastDate.getDate();
                    if (days < 2)
                        showString = "vor einem Tag";
                    else
                        showString = "vor " + days + " Tagen";
                } else if (diferenceDays < 14 && (currentDate.getDay() + 6) % 7 > (pastDate.getDay() + 6) % 7)
                    showString = "vor einer Woche";
                else {
                    if (currentDate.getYear() == pastDate.getYear())
                        showString = "am " + pastDate.getDate() + ". " + (pastDate.getMonth() + 1) + ".";
                    else
                        showString = "am " + pastDate.getDate() + ". " + (pastDate.getMonth() + 1) + ". " + pastDate.getFullYear();
                }
                @if(generated) {
                    @: $('#lastEdit').html("Zuletzt erstellt " + showString);
                }
                else {
                    @: $('#lastEdit').html("Zuletzt bearbeitet " + showString);
                }
            };
            calculateTime();
            window.setInterval(calculateTime, 1000);


            function guidGenerator() {
                var S4 = function() {
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                };
                return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
            }

            var hiddenFooter = $('.compact-footer');
            hiddenFooter.removeClass('compact-footer');
            hiddenFooter.replaceWith(function() {
                var id = '_' + guidGenerator();

                return '' +
                    '<div data-toggle="collapse" data-target="#' + id + '" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">' +
                    $(this).attr("class") +
                    ' <span class="glyphicon glyphicon-chevron-down"></span>' +
                    '</div>' +
                    '<div class="collapse" id="' + id + '">' +
                    $(this).html() +
                    '</div>';

            });

            var meisterInfos = $('.hidden-information');
            // meisterInfos.append('</div>');
            meisterInfos.removeClass("hidden-information");

            meisterInfos.replaceWith(function() {

                var id = '_' + guidGenerator();

                return '' +
                    '<div class="panel panel-info">' +
                    '<div class="panel-heading" data-toggle="collapse" data-target="#' + id + '" aria-expanded="false" aria-controls="collapseExample">' +
                    $(this).attr("class") +
                    '</div>' +
                    '<div class="panel-body collapse" id="' + id + '">' +
                    $(this).html() +
                    '</div>' +
                    '</div>';
            });


            //meisterInfos.addClass("panel panel-info");


        });
    </script>

</body>

</html>